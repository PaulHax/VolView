diff --git a/node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js b/node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js
index e2e24b5..35efba5 100644
--- a/node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js
+++ b/node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js
@@ -7,6 +7,8 @@ import { Q as isPowerOfTwo, M as nearestPowerOfTwo } from '../../Common/Core/Mat
 import vtkViewNode from '../SceneGraph/ViewNode.js';
 import { registerOverride } from './ViewNodeFactory.js';
 
+var toHalf = HalfFloat.toHalf;
+
 function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
 
 function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
@@ -609,9 +611,10 @@ function vtkOpenGLTexture(publicAPI, model) {
       for (var _idx2 = 0; _idx2 < data.length; _idx2++) {
         if (data[_idx2]) {
           var newArray = new Uint16Array(pixCount);
+          var src = data[_idx2];
 
           for (var i = 0; i < pixCount; i++) {
-            newArray[i] = HalfFloat.toHalf(data[_idx2][i]);
+            newArray[i] = toHalf(src[i]);
           }
 
           pixData.push(newArray);
